//=================================================================================
//	プログラム名	：	
//	処理			：	ファイル解析処理[file.cpp]
//	メイン処理		：	main.cpp
//	作成者			：	moriya gaku
//=================================================================================

//=================================================================================
//	インクルードファイル
//=================================================================================
#include "file.h"
#include <string.h>

//=================================================================================
//	トークンまでの文字を取得する関数
//=================================================================================
int DivideToken(FILE *pFile, const char* pToken, char *pBuf)
{
	//	変数宣言
	int nBufCount = 0;			//	文字列長さ
	char c;						//	文字

								//	ファイルの末尾までループ
	while ((c = (char)fgetc(pFile)) != EOF)
	{
		//	トークンの個数までループ
		for (unsigned int i = 0; i < strlen(pToken); i++)
		{
			//	トークンの文字と同じならリターン
			if (pToken[i] == c)
			{
				pBuf[nBufCount] = '\0';
				return nBufCount;
			}
		}
		pBuf[nBufCount++] = c;
	}
	pBuf[nBufCount] = '\0';
	return -1;
}

//=================================================================================
//	文字列出現数をカウントする関数
//=================================================================================
int CountString(FILE * pFile, const char * pStr, const char * pToken)
{
	{
		//	変数宣言
		int nCount = 0;
		char buf[256];

		while (DivideToken(pFile, pToken, buf) >= 0)
		{
			if (strcmp(pStr, buf) == 0)
			{
				nCount++;
			}

		}
		return nCount;
	}
}