//=================================================================================
//	プログラム名	：	
//	処理			：	描画設定処理[renderer.cpp]
//	メイン処理		：	main.cpp
//	作成者			：	moriya gaku
//=================================================================================

//=================================================================================
//	インクルードファイル
//=================================================================================
#include "main.h"
#include "renderer.h"
#include "debug.h"

//=================================================================================
//　静的メンバ変数を宣言
//=================================================================================
LPDIRECT3D9 CRenderer::m_pD3D = NULL;
LPDIRECT3DDEVICE9 CRenderer::m_pD3DDevice = NULL;
LPDIRECT3DSURFACE9 CRenderer::m_pDeviceSurf = NULL;
LPDIRECT3DSURFACE9 CRenderer::m_pDeviceDepthStencil = NULL;

//=================================================================================
//	コンストラクタ
//=================================================================================
CRenderer::CRenderer()
{
	m_pD3D = NULL;
	m_pD3DDevice = NULL;
}

//=================================================================================
//	デストラクタ
//=================================================================================
CRenderer::~CRenderer()
{
}

//=================================================================================
//	初期化処理
//=================================================================================
HRESULT CRenderer::Init( HWND hWnd, bool bWindow )
{
	// D3Dの設定情報構造体
	D3DPRESENT_PARAMETERS d3dpp;

	// ディスプレイの状態構造体
    D3DDISPLAYMODE d3ddm;

	// Direct3Dオブジェクトの作成
	m_pD3D = Direct3DCreate9(D3D_SDK_VERSION);
	if(m_pD3D == NULL)
	{
		return E_FAIL;
	}

	// 現在のディスプレイモードを取得
    if(FAILED(m_pD3D->GetAdapterDisplayMode(D3DADAPTER_DEFAULT, &d3ddm)))
	{
		return E_FAIL;
	}

	// デバイスのプレゼンテーションパラメータの設定
	ZeroMemory(&d3dpp, sizeof(d3dpp));								// ワークをゼロクリア
	d3dpp.BackBufferCount			 = 1;							// バックバッファの数
	d3dpp.BackBufferWidth			 = SCREEN_WIDTH;				// ゲーム画面サイズ(幅)
	d3dpp.BackBufferHeight			 = SCREEN_HEIGHT;				// ゲーム画面サイズ(高さ)
	d3dpp.BackBufferFormat			 = d3ddm.Format;				// カラーモードの指定
	d3dpp.SwapEffect				 = D3DSWAPEFFECT_DISCARD;		// 映像信号に同期してフリップする
	d3dpp.EnableAutoDepthStencil	 = TRUE;						// デプスバッファ（Ｚバッファ）とステンシルバッファを作成
	d3dpp.AutoDepthStencilFormat	 = D3DFMT_D16;					// デプスバッファとして16bitを使う
	d3dpp.Windowed					 = bWindow;						// ウィンドウモード
	d3dpp.FullScreen_RefreshRateInHz = D3DPRESENT_RATE_DEFAULT;		// リフレッシュレート
	d3dpp.PresentationInterval       = D3DPRESENT_INTERVAL_DEFAULT;	// インターバル

	// デバイスの生成
	// ディスプレイアダプタを表すためのデバイスを作成
	// 描画と頂点処理をハードウェアで行なう
	if(FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT, 
									D3DDEVTYPE_HAL, 
									hWnd, 
									D3DCREATE_HARDWARE_VERTEXPROCESSING, 
									&d3dpp, &m_pD3DDevice)))
	{
		// 上記の設定が失敗したら
		// 描画をハードウェアで行い、頂点処理はCPUで行なう
		if(FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT, 
										D3DDEVTYPE_HAL, 
										hWnd, 
										D3DCREATE_SOFTWARE_VERTEXPROCESSING, 
										&d3dpp, &m_pD3DDevice)))
		{
			// 上記の設定が失敗したら
			// 描画と頂点処理をCPUで行なう
			if(FAILED(m_pD3D->CreateDevice(D3DADAPTER_DEFAULT, 
											D3DDEVTYPE_REF, hWnd, 
											D3DCREATE_SOFTWARE_VERTEXPROCESSING, 
											&d3dpp, &m_pD3DDevice)))
			{
				// 生成失敗
				return E_FAIL;
			}
		}
	}

	// レンダーステートの設定
    m_pD3DDevice->SetRenderState( D3DRS_CULLMODE, D3DCULL_NONE /*D3DCULL_CCW*/ );		// カリング設定
	m_pD3DDevice->SetRenderState( D3DRS_ZENABLE, TRUE );								// Zバッファを使用する
	m_pD3DDevice->SetRenderState( D3DRS_ALPHABLENDENABLE, TRUE );						// αブレンドを行う
	m_pD3DDevice->SetRenderState( D3DRS_SRCBLEND, D3DBLEND_SRCALPHA );					// αソースカラーの指定
	m_pD3DDevice->SetRenderState( D3DRS_DESTBLEND, D3DBLEND_INVSRCALPHA );				// αデスティネーションカラーの指定


	//m_pD3DDevice->SetRenderState( D3DRS_FILLMODE, D3DFILL_WIREFRAME );				// ワイヤーフレームオン


	// サンプラーステートの設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_ADDRESSU, D3DTADDRESS_WRAP);				// テクスチャＵ値の繰り返し設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_ADDRESSV, D3DTADDRESS_WRAP);				// テクスチャＶ値の繰り返し設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_MINFILTER, D3DTEXF_LINEAR);				// テクスチャ拡大時の補間設定
	m_pD3DDevice->SetSamplerState(0, D3DSAMP_MAGFILTER, D3DTEXF_LINEAR);				// テクスチャ縮小時の補間設定

	// テクスチャステージステートの設定
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_SELECTARG1);			// アルファブレンディング処理(初期値はD3DTOP_SELECTARG1)
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);				// 最初のアルファ引数(初期値はD3DTA_TEXTURE、テクスチャがない場合はD3DTA_DIFFUSE)
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_CURRENT);				// ２番目のアルファ引数(初期値はD3DTA_CURRENT)

	m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG1, D3DTA_TEXTURE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLORARG2, D3DTA_DIFFUSE);  
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_COLOROP, D3DTOP_MODULATE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG1, D3DTA_TEXTURE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAARG2, D3DTA_DIFFUSE);
	m_pD3DDevice->SetTextureStageState(0, D3DTSS_ALPHAOP, D3DTOP_MODULATE);

	// デバイスのバックバッファを保存
	m_pD3DDevice->GetRenderTarget(0, &m_pDeviceSurf);				//バックバッファのサーフェイスを取得
	m_pD3DDevice->GetDepthStencilSurface(&m_pDeviceDepthStencil);	//バックバッファの深度バッファを取得

	// デバッグ
	CDebug::Init( m_pD3DDevice );

	return S_OK;
}

//=================================================================================
//	終了処理
//=================================================================================
void CRenderer::Uninit( void )
{
	// デバッグクラス
	CDebug::Uninit();

	// デバイスの破棄
	if(m_pD3DDevice != NULL)
	{
		m_pD3DDevice->Release();
		m_pD3DDevice = NULL;
	}

	// Direct3Dオブジェクトの破棄
	if( m_pD3D != NULL)
	{
		m_pD3D->Release();
		m_pD3D = NULL;
	}

	return;
}

//===============================================================================
// 描画開始処理
//===============================================================================
HRESULT CRenderer::DrawBegin( void )
{
	// デフォルトのレンダーターゲットへ切り替え
	m_pD3DDevice->SetRenderTarget(0, m_pDeviceSurf);
	m_pD3DDevice->SetDepthStencilSurface(m_pDeviceDepthStencil);

	// 画面クリア
	m_pD3DDevice->Clear(0, NULL, (D3DCLEAR_TARGET | D3DCLEAR_ZBUFFER), COLOR_GRAY2, 1.0f, 0);

	// Direct3Dによる描画の開始
	if(FAILED(m_pD3DDevice->BeginScene()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===============================================================================
// 描画終了処理
//===============================================================================
void CRenderer::DrawEnd( void )
{
	// Direct3Dによる描画の終了
	m_pD3DDevice->EndScene();

	// バックバッファとフロントバッファの入れ替え
	m_pD3DDevice->Present(NULL, NULL, NULL, NULL);

}

//===============================================================================
// デバイスの取得処理
//===============================================================================
LPDIRECT3DDEVICE9 CRenderer::GetDevice( void )
{
	if( m_pD3DDevice != NULL )
	{
		return m_pD3DDevice;
	}
	
	return NULL;
}

//===============================================================================
// デバイスの取得処理
//===============================================================================
#ifdef _DEBUG
void CRenderer::DrawFPS( void )
{
	RECT rect = {0, 0, SCREEN_WIDTH, SCREEN_HEIGHT};
	char str[256];
	int nCountFPS;

	// FPS取得
	nCountFPS = GetFPS();
	wsprintf(str, "FPS:%d\n", nCountFPS);

	// テキスト描画
	CDebug::AddText( str );

	return;
}
#endif